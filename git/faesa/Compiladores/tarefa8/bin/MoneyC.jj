 /* MoneyC.jj - compilador final fodao */options{  JDK_VERSION = "1.5";  DEBUG_PARSER = true;  DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(MoneyC)import java.io.*;import java.util.*;public class MoneyC{  static Tabela tab = new Tabela();   public static void main(String args []) throws ParseException  {        MoneyC analisador = null;      try {         analisador = new MoneyC(new FileInputStream(args [0]));         analisador.inicio();      }      catch(FileNotFoundException e) {         System.out.println("Erro: arquivo não encontrado");      }      catch(TokenMgrError e) {         System.out.println("Erro léxico\n" + e.getMessage());      }            catch(ParseException e) {         System.out.println("Erro sintático\n" + e.getMessage());      }  }}PARSER_END(MoneyC)SKIP : { " " | "\t" | "\r" | "\n" |  "/*" : multilinecomment |  "//" : comment}< comment > SKIP:{  "\r" | "\n":DEFAULT | < ~[] > }< multilinecomment > SKIP:{  "*/":DEFAULT | < ~[] >}TOKEN :{  < VARIAVEL : "$" ([ "a"-"z", "A"-"Z"])* (["_", "0"-"9" ])* >| < INT : ([ "0"-"9" ])+ >| < STRING : "\"" ( ~["\""] )* "\"">| < IDENTIFICADOR_VARIAVEL : "VAR" >| < FIM_COMANDO : ";" >| < TIPO_STRING : "string" >| < TIPO_INTEIRO : "int" >| < ENTRADA_DADOS : "leia" >| < REL_MAIOR_IGUAL : ">=">| < REL_MENOR_IGUAL : "<=">| < REL_MAIOR : ">">| < REL_MENOR : "<">| < REL_IGUALDADE : "==">| < REL_DIFERENCA : "!=">| < ATRIBUICAO : ":=" >| < SAIDA_DADOS : "exibe" >| < POTENCIA : "^" >| < MULTIPLICACAO : "*" >| < DIVISAO : "/" >| < ADICAO : "+" >| < SUBTRACAO : "-" >| < CONCATENACAO : "." >| < LOGICO_E : "&&" >| < LOGICO_OU : "||" >| < LOGICO_NAO : "!" >| < SE : "SE" >| < SENAO : "SENAO" >| < FIM_SE : "FIM_SE" >| < ENQUANTO : "ENQUANTO" >| < FIM_ENQUANTO : "FIM_ENQUANTO" >| < ABRE_EXPRESSAO : "(" >| < FECHA_EXPRESSAO : ")" >| < ABRE_BLOCO : "{" >| < FECHA_BLOCO : "}" >| < VIRGULA : "," >| < NOME_FUNCAO : "_" (["_", "a"-"z", "A"-"Z"])+ (["0"-"9","a"-"z", "A"-"Z" ])* >}void inicio() : {System.out.println("inicio");}{     (bloco_codigo()) (funcao())* < EOF >}void funcao():{}{	  tipo_variavel() < NOME_FUNCAO >  < ABRE_EXPRESSAO > (declaracao_parametros())? < FECHA_EXPRESSAO >  bloco_codigo()}void declaracao_parametros ():{}{  LOOKAHEAD(3) tipo_variavel() < VARIAVEL >| tipo_variavel() < VARIAVEL > <VIRGULA > declaracao_parametros()  }LinkedList<Comando> bloco_codigo ():{	LinkedList<Comando> comandos = new LinkedList<Comando>();}{	< ABRE_BLOCO > (linha_comando(comandos))* < FECHA_BLOCO >| (linha_comando(comandos))*{	return comandos;}}void linha_comando(LinkedList<Comando> comandos) : {} {    (      comando_exibe(comandos)    | comando_declaracao()    | LOOKAHEAD(2) comando_atribuicao(comandos)    | comando_fluxo_se(comandos)	| comando_fluxo_enquanto(comandos)	|LOOKAHEAD(2) chamada_funcao()	)	 <FIM_COMANDO>}void comando_exibe(LinkedList<Comando> comandos) :{  Token t; Object o; }{    < SAIDA_DADOS > <ABRE_EXPRESSAO > (t = <STRING>  {    	comandos.add(new Comando('I',t));  }  | o = expressao_aritmetica(null)  {    	comandos.add(new Comando('I',o));  })  ([< VIRGULA > (    t = <STRING>  {    	comandos.add(new Comando('I',t));  }    | o = expressao_aritmetica(null)   {	comandos.add(new Comando('I',o));  })]  ) <FECHA_EXPRESSAO >  }void comando_declaracao() :{Token t; char tp; Simbolo simb;}{  <IDENTIFICADOR_VARIAVEL>  (      tp = tipo_variavel()	  	(	    t = <VARIAVEL>		  {		    simb = new Simbolo(tp, t.image);		    if (!(tab.inclui(simb))) System.out.println("Erro semantico\n" + simb.getNome() + " ja existe!");		      		  }		)	  (	    <VIRGULA>	    t = <VARIAVEL>	  	{	   	 simb = new Simbolo(tp, t.image);	   	 if (!(tab.inclui(simb))) System.out.println("Erro semantico\n" + simb.getNome() + " ja existe!");	  	}	  )*  )}void comando_atribuicao(LinkedList<Comando> comandos) :{  Token t; Object o;}{    t = <VARIAVEL>  <ATRIBUICAO>  o = expressao_aritmetica(null)  {    if (!(tab.isExiste(t.image)))    {       System.out.println("Erro semantico\n" + t.image + " nao foi declarado!");    }else    {       comandos.add(new Comando('A',t.image,o));  	}  } }void comando_fluxo_se(LinkedList<Comando> comandos) :{	Object expIf; Object blocoIf; Object blocoElse = null;}{  <SE>  <ABRE_EXPRESSAO >  expIf = expressao_booleana()  < FECHA_EXPRESSAO > blocoIf = bloco_codigo()  [<SENAO> blocoElse = bloco_codigo()]<FIM_SE>  {    comandos.add(new Comando('S',expIf,blocoIf,blocoElse));  }}void comando_fluxo_enquanto(LinkedList<Comando> comandos) :{  Object exp; Object bloco;}{  <ENQUANTO>    <ABRE_EXPRESSAO > exp = expressao_booleana() < FECHA_EXPRESSAO > bloco = bloco_codigo()<FIM_ENQUANTO>    {      comandos.add(new Comando('E',exp,bloco));    }}void chamada_funcao() :{}{  < NOME_FUNCAO > <ABRE_EXPRESSAO > [lista_parametros()] < FECHA_EXPRESSAO >}void lista_parametros() :{}{  expressao_aritmetica(null) (<VIRGULA > expressao_aritmetica(null))* }Arvore expressao_booleana() :{  Token t;Item item;  Arvore listaExp = new Arvore();}{    fator_expressao_booleana(listaExp) (      (t = < LOGICO_E >      	{	    	  			item = new Item('&',t.image);  	  			listaExp.add(item);  			}      | t = < LOGICO_OU >		{	    	  			item = new Item('|',t.image);  	  			listaExp.add(item);  			}      ) fator_expressao_booleana(listaExp)) *    {      return listaExp;    }}Arvore fator_expressao_booleana(Arvore listaExp) :{	Token t;Item item;}{  (  	(		listaExp = expressao_aritmetica(null)		(		     t = < REL_MAIOR >		    {	    	  			item = new Item('>',t.image);  	  			listaExp.add(item);  				}		   | t = < REL_MENOR >		    {	    	  			item = new Item('<',t.image);  	  			listaExp.add(item);  				}		   | t = < REL_MAIOR_IGUAL >		    {	    	  			item = new Item('M',t.image);  	  			listaExp.add(item);  				}		   | t = < REL_MENOR_IGUAL >		    {	    	  			item = new Item('m',t.image);  	  			listaExp.add(item);  				}		   | t = < REL_IGUALDADE >		    {	    	  			item = new Item('=',t.image);  	  			listaExp.add(item);  				}		   | t = < REL_DIFERENCA >		    {	    	  			item = new Item('!',t.image);  	  			listaExp.add(item);  				}	  	)		listaExp = expressao_aritmetica(listaExp)		| < LOGICO_NAO > <ABRE_EXPRESSAO > fator_expressao_booleana(listaExp) <FECHA_EXPRESSAO >	)	{	  return listaExp;	}  )}void concatenacao_string(LinkedList<Item> listaExp_):{  Token t; Item item;  LinkedList<Item> listaExp;  if (listaExp_ == null)  	  listaExp = new LinkedList<Item>();	else		  listaExp = listaExp_;	}{	t = < STRING >	{	    	  item = new Item('s',t.image);  	  listaExp.add(item);  		}	 (t = < ADICAO >	 	{  	  		item = new Item('o',t.image);  	  		listaExp.add(item);  		}	 t = < STRING >	 {	  item = new Item('s',t.image);  	  listaExp.add(item);	 })* }Arvore expressao_aritmetica(Arvore listaExp_) :{  Token t;Item item;  Arvore listaExp;  listaExp = new Arvore();}{	operadorMultiplicativo(listaExp)	(	  (t = < SUBTRACAO > | t = < ADICAO >)	  {  	  		item = new Item('o',t.image);  	  		listaExp.add(item);  		}	  	 operadorMultiplicativo(listaExp)	 )*	 {	   if (listaExp_ != null)	   {	     listaExp_.add(listaExp);	     System.out.println(listaExp_.meDahPostFix());	   return listaExp_;	   	   }else	   {		System.out.println(listaExp.meDahPostFix());	   	return listaExp;	 	}	 }}void operadorMultiplicativo(Arvore listaExp) : {Token t;Item item;}{	potenciacao(listaExp)	(	  (	    t = < MULTIPLICACAO > | t = < DIVISAO >)	    {  	  		item = new Item('o',t.image);  	  		listaExp.add(item);  		} potenciacao(listaExp))*}  void potenciacao(Arvore listaExp) : {Token t;Item item;}{	elemento(listaExp)	(	  t = < POTENCIA >	  {  	  		item = new Item('o',t.image);  	  		listaExp.add(item);  		}			   elemento(listaExp))*}void elemento(Arvore listaExp):{Token t;Item item;}{  (    t = < SUBTRACAO >		{  	  		item = new Item('o',t.image);  	  		listaExp.add(item);  		}    )* unario(listaExp)}void unario(Arvore listaExp):{Token t;Item item;}{  	t = < INT >  	{  	  item = new Item('i',t.image);  	  listaExp.add(item);  	}  	| <ABRE_EXPRESSAO > expressao_aritmetica(listaExp) < FECHA_EXPRESSAO >  	|  t = <VARIAVEL> 	  {		if (!(tab.isExiste(t.image))) System.out.println("Erro semantico\n" + t.image + " nao foi declarado!");	  }}char tipo_variavel() :{}{  (<TIPO_STRING> {return 's';}| <TIPO_INTEIRO>{return 'i';})  }